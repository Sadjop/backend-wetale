#!/bin/bash

# R√©cup√®re le nom de la branche actuelle
branch_name=$(git rev-parse --abbrev-ref HEAD)

# V√©rifie si l'utilisateur est bien dans un d√©p√¥t Git
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "‚ùå Vous n'√™tes pas dans un d√©p√¥t Git."
  exit 1
fi

# V√©rifie si la branche actuelle est 'main'
if [[ "$branch_name" == "main" ]]; then
  # V√©rifie si des modifications locales ou des commits non pouss√©s existent
  has_changes=$(git diff --quiet || echo "1")
  has_staged_changes=$(git diff --cached --quiet || echo "1")
  has_unpushed_commits=$(git log origin/main..HEAD --oneline)

  if [[ "$has_changes" == "1" || "$has_staged_changes" == "1" || -n "$has_unpushed_commits" ]]; then
    echo "‚ö†Ô∏è  Des modifications ou des commits non pouss√©s ont √©t√© d√©tect√©s sur 'main'."

    # Demande les informations pour la nouvelle branche
    read -p "Type de t√¢che (feature, bugfix, etc.) : " type
    read -p "Module (backend, frontend, etc.) : " module
    read -p "Num√©ro d'identifiant : " id
    read -p "Description : " description

    # V√©rifie que tous les champs requis sont remplis
    if [[ -z "$type" || -z "$module" || -z "$id" || -z "$description" ]]; then
      echo "‚ùå Tous les champs doivent √™tre remplis."
      exit 1
    fi

    # Formatage de la description
    formatted_description=$(echo "$description" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
    new_branch_name="${type}/${module}-${id}-${formatted_description}"

    # Cr√©ation d'une nouvelle branche √† partir de 'main'
    echo "üì¶ Cr√©ation de la nouvelle branche : $new_branch_name"
    git checkout -b "$new_branch_name"

    # Gestion des commits en attente
    if [[ -n "$has_unpushed_commits" ]]; then
      echo "üì§ Les commits en attente sont automatiquement transf√©r√©s vers '$new_branch_name'."
      # Les commits sont automatiquement port√©s sur la nouvelle branche.
    fi

    # Gestion des modifications locales (non suivies et index√©es)
    if [[ "$has_changes" == "1" || "$has_staged_changes" == "1" ]]; then
      echo "üì§ D√©placement des modifications locales vers '$new_branch_name'..."

      # Ajoute toutes les modifications locales et non suivies
      git add -A
      git commit -m "WIP: Modifications d√©plac√©es depuis 'main'"
    fi

    # R√©initialisation de 'main'
    echo "‚ôªÔ∏è R√©initialisation de la branche 'main' √† son √©tat distant..."
    git checkout main
    git reset --hard origin/main

    echo "‚úÖ Les modifications et commits ont √©t√© d√©plac√©s vers la branche '$new_branch_name'."
    exit 0
  else
    echo "‚úÖ Aucun changement ou commit en attente d√©tect√© sur 'main'. Vous pouvez continuer normalement."
    exit 0
  fi
else
  echo "Vous n'√™tes pas sur la branche 'main'. Aucune action n√©cessaire."
  exit 0
fi
